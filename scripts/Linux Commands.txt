#########################################################################
####====     High Performance Network Testing On Azure VMs       ====####
#########################################################################

Throughput = Packet_Rate * (floor(1460/message_size) + 1) * message_size/2

VM Notes:
* Ubuntu 20.04 - D4s_v3 (could and should be larger for true test)
* Use Proximity Placement group
* Give the VMs static Public IPs.
* Create 2 NICs - "mgmt" and "Production"
   - "Primary" NIC is the default NIC, no Accelerated Networking that gets created, assign PubIP to this NIC.
   - Create additional NIC and attach - enable Accelerated Networking


* Create some alises in .ssh/config on your Laptop/Workstation:
### Azure VMs
Host ubuntu01
  HostName nfvtest01.westus2.cloudapp.azure.com
  User azureadmin
  PasswordAuthentication no

Host ubuntu02
  HostName nfvtest-02.westus2.cloudapp.azure.com
  User azureadmin
  PasswordAuthentication no


###==== Linux OS Setup/DPDK Install
# Environment
echo "set -o vi " >> .bashrc
. .bashrc
cd .ssh; ssh-keygen
## Add the other host/s keys.
vi ./authorizedkeys

EDITOR=vim; export $EDITOR

# Check Devices - 
lspci | grep Mell
ethtool -S eth0 | grep vf_

# Install some Basic tools
sudo -i
apt update
apt install numactl -y
apt-get install build-essential -y
apt upgrade -y

###==== DPDK
# Need some libs and utilities
apt-get install -y librdmacm-dev librdmacm1 libnuma-dev libmnl-dev meson python3-pip autoconf lib32z1
apt-get install -y python3-pyelftools python-pyelftools


# Get the package here - https://core.dpdk.org/download
mkdir temp
cd temp
wget https://fast.dpdk.org/rel/dpdk-20.11.tar.xz
tar xf dpdk-20.11.tar.xz
cd dpdk-20.11

# Build DPDK - uses meson/ninja - not gcc make
meson /root/dpdk
cd /root/dpdk 
ninja
ninja install
ldconfig

# Might need to copy over usertools to the build dir
cp ~/temp/dpdk-20.11/usertools/* ~/dpdk/usertools/

###--- Need to enable Huge Pages
mkdir /mnt/huge
mount -t hugetlbfs pagesize=1GB /mnt/huge
grep Huge /proc/meminfo
echo 256 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages

### Update /etc/fstab
echo "" >> /etc/fstab
echo "### DPDK Hugepages" >> /etc/fstab
echo "nodev /mnt/huge hugetlbfs pagesize=1GB 0 0" >> /etc/fstab

###--- Edit Grub 
# edit: /etc/default/grub.d/50-cloudimg-settings.cfg
# Replace "GRUB_CMDLINE_LINUX_DEFAULT=" line with - 
GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0 earlyprintk=ttyS0 default_hugepagesz=1G hugepagesz=1G hugepages=8"

# Optional (didn't need with the small single NUMA node VM size)
isolcpus=2,3,4,5,6,7,8
iommu=pt intel_iommu=on

# Run - 
modprobe -a ib_uverbs

###==== Binding the interface to DPDK - 

# Use eth1/enP2s2
root@Ubuntu01:~# ethtool -i enP2s2
driver: mlx5_core
version: 5.0-0
firmware-version: 14.25.8362 (MSF0010110035)
expansion-rom-version:
bus-info: 0002:00:02.0
supports-statistics: yes
supports-test: yes
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: yes

# Enable driver/s
modprobe vfio-pci
modprobe uio_pci_generic

# Bind
modprobe uio_pci_generic mlx5_core
dpdk-devbind.py -b uio_pci_generic 0002:00:02.0
root@Ubuntu01:~# dpdk-devbind.py -s

Network devices using DPDK-compatible driver
============================================
0002:00:02.0 'MT27710 Family [ConnectX-4 Lx Virtual Function] 1016' drv=uio_pci_generic unused=mlx5_core,vfio-pci


# Bind/Unbind
dpdk-devbind.py -b mlx5_pci 0002:00:02.0
dpdk-devbind.py -u 0002:00:02.0

###--- Perf tools to show TCP based baseline diff bewteen SRIOV and no SRIOV
### latency: "Sockperf"
### throughput: "iperf3"

###--- Sockperf
git clone https://github.com/mellanox/sockperf
cd sockperf/
./autogen.sh
./configure --prefix= --enable-test
make 
make install

# Run it for quick test
# Server
sockperf sr --tcp -i 10.30.1.16 -m 64 -p 12345
sockperf sr --tcp -i 10.30.4.80 -m 64 -p 12345
# Client
sockperf ping-pong -i 10.30.1.16 --tcp -m 64 -t 10 -p 12345 --full-rtt
sockperf ping-pong -i 10.30.4.80 --tcp -m 64 -t 10 -p 12345 --full-rtt


###--- iperf3
wget https://iperf.fr/download/source/iperf-3.1.3-source.tar.gz
tar xzf iperf-3.1.3-source.tar.gz
cd iperf-3.1.3/
./configure
make install
ldconfig
/usr/local/bin/iperf3



###======= Use dpdk-testpmd
# dpdk-testpmd to generate pps -
* On target - start RX first, note 0 pps
* On source host run TX to generate pps, note it kick up on target
###--- ubuntu01
# TX
#!/bin/bash
# Run testpmd in TX mode
dpdk-testpmd -l 1-3 -n 1 -w 0002:00:02.0 --vdev=net_vdev_netvsc0,iface=enP2s2 -- --port-topology=chained --nb-cores 2 --forward-mode=txonly --eth-peer=1,00:0d:3a:c3:cc:32 --tx-ip=10.30.4.80,10.30.4.81 --max-pkt-len=64 --txq=16 --stats-period 1

# RX
#!/bin/bash
# Run testpmd in RX mode
dpdk-testpmd -l 0-3 -n 1 -w 0002:00:02.0 --vdev=net_vdev_netvsc0,iface=eth1 -- --port-topology=chained --nb-cores 3 --forward-mode=rxonly --eth-peer=1,00:0d:3a:c3:cc:32 --stats-period 1

###--- ubuntu02
# TX
#!/bin/bash
# Run testpmd in TX mode
dpdk-testpmd -l 0-3 -n 1 -w 0002:00:02.0 --vdev=net_vdev_netvsc0,iface=eth1 -- --port-topology=chained --nb-cores 1 --forward-mode=txonly --eth-peer=1,00:0d:3a:f6:03:40 --tx-ip=10.30.4.81,10.30.4.80 --stats-period 1

# RX
#!/bin/bash
# Run testpmd in RX mode
dpdk-testpmd -l 0-3 -n 1 -w 0002:00:02.0 --vdev=net_vdev_netvsc0,iface=enP2s2 -- --port-topology=chained --nb-cores 3 --forward-mode=rxonly --eth-peer=1,00:0d:3a:f6:03:40 --stats-period 1

###==== Other scripts (really one-liners)

* dstat -
dstat --time --load --proc --cpu --sys --vm --disk

###--- ubuntu01 - in this testing ubuntu01 is the server
*** iperf3
* eth0
iperf3 -s 10.30.1.16 -f G
* eth1 (SRIOV)
iperf3 -s 10.30.1.80 -f G

*** Sockperf
* eth0
sockperf sr --tcp -i 10.30.1.16 -m 64 -p 12345

* eth1 (SRIOV)
sockperf sr --tcp -i 10.30.4.80 -m 64 -p 12345


###--- ubuntu02 - in this testing ubuntu02 is the Client
*** iperf3
* eth0
iperf -c 10.30.1.16 -P 32 -w 500K

* eth1 (SRIOV)
iperf -c 10.30.4.80 -P 32 -w 500K -p 9090

*** Sockperf
* eth0
sockperf ping-pong -i 10.30.1.16 --tcp -m 64 -t 10 -p 12345 --full-rtt

* eth1 (SRIOV)
sockperf ping-pong -i 10.30.4.80 --tcp -m 64 -t 10 -p 12345 --full-rtt

### Packet Monitor
###<BEGIN>
#!/bin/bash

if [ "$1" != "" ]; then
        NIC=$1
else
    echo "Please provide the network interface you'd like to monitor."
    echo "example: $0 eth0"
    exit 1
fi
p=0
d=0
while sleep 1; do
r=$(netstat -i | grep $NIC | awk '{print $3,$5}' | grep -v statistics)
        p_now=$(echo $r | awk '{print $1}')
        d_now=$(echo $r |awk '{print $2}')

        if [ "$p" -gt "0" ]; then
                dropped=$((d_now - d))
                rx=$((p_now - p))
                perc_d=$(echo "scale=5;($dropped/$rx)*100" | bc -l)
                echo "pps: received: $rx    dropped: $dropped  $perc_d %"
        fi
        p=$p_now
        d=$d_now
done
###<END>


###======= Pktgen: 
### ----  Install the correct pktgen source  
cd temp
git clone http://dpdk.org/git/apps/pktgen-dpdk
cd pktgen-dpdk/
export RTE_SDK=/root/dpdk
export RTE_TARGET=x86_64-native-linux-gcc
apt install pkg-config
apt install cmake
apt install libpcap-dev
meson /root/pktgen
cd ../../pktgen
ninja
ninja install

pktgen -l 1-3 -n 4 --proc-type auto --log-level 7 --file-prefix pg -a 0002:00:02.0 -d librte_net_mlx5.so -- -v -T -P -j -m [2:3].0 -f themes/black-yellow.theme
pktgen --proc-type auto -a 0002:00:02.0 -d librte_net_mlx5.so -- -N -T -P -f pktgen2.pkt

