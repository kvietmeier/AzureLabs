Linux Commands

# Environment
echo "set -o vi " >> .bashrc
. .bashrc
cd .ssh; ssh-keygen

EDITOR=vim; export $EDITOR

# Devices - 
lspci | grep Mell
ethtool -S eth0 | grep vf_

# Install Basic tools
sudo -i
apt update
apt upgrade -y
apt install numactl -y
apt-get install build-essential -y


###==== DPDK
# Don't need this - add-apt-repository ppa:canonical-server/dpdk-azure -y

# Need some libs and utilities
apt-get install -y librdmacm-dev librdmacm1 libnuma-dev libmnl-dev meson python3-pip autoconf lib32z1
apt-get install -y python3-pyelftools python-pyelftools


# Get the package here - https://core.dpdk.org/download
mkdir temp
cd temp
wget https://fast.dpdk.org/rel/dpdk-20.11.tar.xz
tar xf dpdk-20.11.tar.xz
cd dpdk-20.11

# Build it
meson /root/dpdk
cd /root/dpdk 
ninja
ninja install
ldconfig

# Copy over usertools to the build dir
cp ~/temp/dpdk-20.11/usertools/* ~/dpdk/usertools/

###--- Need to enable Huge Pages
mkdir /mnt/huge
mount -t hugetlbfs pagesize=1GB /mnt/huge
grep Huge /proc/meminfo
echo 256 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages

echo "" >> /etc/fstab
echo "### DPDK Hugepages" >> /etc/fstab
echo "nodev /mnt/huge hugetlbfs pagesize=1GB 0 0" >> /etc/fstab

###--- Edit Grub 
# edit: /etc/default/grub.d/50-cloudimg-settings.cfg
GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0 earlyprintk=ttyS0 default_hugepagesz=1G hugepagesz=1G hugepages=8"

# Optional
isolcpus=2,3,4,5,6,7,8
iommu=pt intel_iommu=on

# Run - 
modprobe -a ib_uverbs

dpdk-testpmd -w 0002:00:02.0 --vdev="net_vdev_netvsc0,iface=eth1"  -- -i --port-topology=chained --tx-ip=10.30.4.80,10.30.4.81

# Compile - didn't work
make config T=x86_64-native-linuxapp-gcc
sed -ri 's,(MLX._PMD=)n,\1y,' build/.config
make 
make install DESTDIR=

### pktgen - 
https://people.kth.se/~danieltt/pktgen/patches/kernel-4.6/pktgen-rx4.6.tar

cd temp
wget https://people.kth.se/~danieltt/pktgen/patches/kernel-4.6/pktgen-rx4.6.tar
tar xf pktgen-rx4.6.tar

Throughput = Packet_Rate * (floor(1460/message_size) + 1) * message_size/2

###--- Sockperf
git clone https://github.com/mellanox/sockperf
cd sockperf/
./autogen.sh
./configure --prefix= --enable-test
make 
make install

# Run it for quick test
# Server
sockperf sr --tcp -i 10.30.1.16 -m 64 -p 12345
sockperf sr --tcp -i 10.30.4.80 -m 64 -p 12345
# Client
sockperf ping-pong -i 10.30.1.16 --tcp -m 64 -t 10 -p 12345 --full-rtt
sockperf ping-pong -i 10.30.4.80 --tcp -m 64 -t 10 -p 12345 --full-rtt


###--- iperf3
wget https://iperf.fr/download/source/iperf-3.1.3-source.tar.gz
tar xzf iperf-3.1.3-source.tar.gz
cd iperf-3.1.3/
./configure
make install
ldconfig
/usr/local/bin/iperf3


* Download the latest DPDK. Version 18.11 LTS or 19.11 LTS is required for Azure.
* Build the default config with:
  make config T=x86_64-native-linuxapp-gcc.
* Enable Mellanox PMDs in the generated config with sed -ri 's,(MLX._PMD=)n,\1y,' build/.config.
* Compile with make.
* Install with make install DESTDIR=<output folder>.

###===========================================================================================###
### Ubuntu01
root@Ubuntu01:~# ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:0d:3a:f5:b1:8e brd ff:ff:ff:ff:ff:ff
    inet 10.30.1.16/24 brd 10.30.1.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20d:3aff:fef5:b18e/64 scope link
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:0d:3a:f6:03:40 brd ff:ff:ff:ff:ff:ff
    inet 10.30.4.80/24 brd 10.30.4.255 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::20d:3aff:fef6:340/64 scope link
       valid_lft forever preferred_lft forever
4: enP2s2: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc mq master eth1 state UP group default qlen 1000
    link/ether 00:0d:3a:f6:03:40 brd ff:ff:ff:ff:ff:ff

root@Ubuntu01:~# lspci
0000:00:00.0 Host bridge: Intel Corporation 440BX/ZX/DX - 82443BX/ZX/DX Host bridge (AGP disabled) (rev 03)
0000:00:07.0 ISA bridge: Intel Corporation 82371AB/EB/MB PIIX4 ISA (rev 01)
0000:00:07.1 IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)
0000:00:07.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 02)
0000:00:08.0 VGA compatible controller: Microsoft Corporation Hyper-V virtual VGA
0002:00:02.0 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx Virtual Function] (rev 80)


root@Ubuntu01:~# lshw -businfo -class network | grep 0002:00:02.0
pci@0002:00:02.0              network        MT27710 Family [ConnectX-4 Lx Virtual Function]



###===========================================================================================###
### Ubuntu02
root@ubuntu02:~# ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:0d:3a:c3:cf:fd brd ff:ff:ff:ff:ff:ff
    inet 10.30.1.17/24 brd 10.30.1.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20d:3aff:fec3:cffd/64 scope link
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:0d:3a:c3:cc:32 brd ff:ff:ff:ff:ff:ff
    inet 10.30.4.81/24 brd 10.30.4.255 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::20d:3aff:fec3:cc32/64 scope link
       valid_lft forever preferred_lft forever
4: enP2s2: <BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP> mtu 1500 qdisc mq master eth1 state UP group default qlen 1000
    link/ether 00:0d:3a:c3:cc:32 brd ff:ff:ff:ff:ff:ff

root@ubuntu02:~# lspci
0000:00:00.0 Host bridge: Intel Corporation 440BX/ZX/DX - 82443BX/ZX/DX Host bridge (AGP disabled) (rev 03)
0000:00:07.0 ISA bridge: Intel Corporation 82371AB/EB/MB PIIX4 ISA (rev 01)
0000:00:07.1 IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)
0000:00:07.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 02)
0000:00:08.0 VGA compatible controller: Microsoft Corporation Hyper-V virtual VGA
0002:00:02.0 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx Virtual Function] (rev 80)



Binding - 

root@Ubuntu01:~# ethtool -i enP2s2
driver: mlx5_core
version: 5.0-0
firmware-version: 14.25.8362 (MSF0010110035)
expansion-rom-version:
bus-info: 0002:00:02.0
supports-statistics: yes
supports-test: yes
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: yes

# Enable driver/s
modprobe vfio-pci
modprobe uio_pci_generic

# Bind
modprobe uio_pci_generic mlx5_core
dpdk-devbind.py -b uio_pci_generic 0002:00:02.0
root@Ubuntu01:~# dpdk-devbind.py -s

Network devices using DPDK-compatible driver
============================================
0002:00:02.0 'MT27710 Family [ConnectX-4 Lx Virtual Function] 1016' drv=uio_pci_generic unused=mlx5_core,vfio-pci


# Unbind
dpdk-devbind.py -u 0002:00:02.0

dpdk-devbind.py -b mlx5_pci 0002:00:02.0


testpmd -w 0002:00:02.0 \
  --vdev="net_vdev_netvsc0,iface=eth1" \
  -- -i \
  --port-topology=chained



###----  Install the correct pktgen source  
git clone http://dpdk.org/git/apps/pktgen-dpdk
cd pktgen-dpdk/
export RTE_SDK=/root/dpdk
export RTE_TARGET=x86_64-native-linux-gcc
apt install pkg-config
apt install cmake
apt install libpcap-dev
meson /root/pktgen
cd ../../pktgen
ninja
ninja install


### ????
export RTE_SDK=/root/dpdk
export RTE_TARGET=x86_64-native-linux-gcc

or
export RTE_TARGET=x86_64-native-linuxapp-gcc

# or use clang if you have it installed:
export RTE_TARGET=x86_64-native-linux-clang
or
export RTE_TARGET=x86_64-native-linuxapp-clang


pktgen -l 1-3 -n 4 --proc-type auto --log-level 7 --file-prefix pg -a 0002:00:02.0 -d librte_net_mlx5.so -- -v -T -P -j -m [2:3].0 -f themes/black-yellow.theme
pktgen --proc-type auto -a 0002:00:02.0 -d librte_net_mlx5.so -- -N -T -P -f pktgen2.pkt

dpdk-testpmd -w 0002:00:02.0 --vdev="net_vdev_netvsc0,iface=eth1" -- -i --port-topology=chained
dpdk-testpmd -l 0-3 -n 1 -w 0002:00:02.0 --vdev=net_vdev_netvsc0,iface=eth1 -- --port-topology=chained --nb-cores 1 --forward-mode=txonly --eth-peer=0,00:0d:3a:c3:cc:32 --stats-period 1
dpdk-testpmd -l 0-3 -n 1 -w 0002:00:02.0 --vdev=net_vdev_netvsc0,iface=eth1 -- --port-topology=chained --nb-cores 1 --forward-mode=rxonly --eth-peer=0,00:0d:3a:f6:03:40 --stats-period 1


https://manpages.debian.org/experimental/dpdk/testpmd.1.en.html